// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(cuid()) @unique
  email       String    @unique
  password    String
  role        UserRole  @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  reservations Reservation?
  deleted Boolean @default(false)
  profile Profile? 
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String   @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  KitchenStaff
  WaiterStaff
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

model Order {
  id          String   @id @default(cuid()) @unique
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  table       Table    @relation(fields: [tableId], references: [id])
  tableId     String
  items       MenuItem[]
  total       Float
  status      OrderStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model MenuItem {
  id          String   @id @default(cuid()) @unique
  name        String @unique
  price       Float
  observations String?
  order Order[]
}



model Table {
  id          String   @id @default(cuid()) @unique
  number      Int
  capacity    Int
  available   Boolean
  orders      Order[]
  reservations Reservation[]
}


model Reservation {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  table       Table    @relation(fields: [tableId], references: [id])
  tableId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reservationTime DateTime
}








