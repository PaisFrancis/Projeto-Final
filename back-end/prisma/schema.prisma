// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(cuid()) @unique
  email       String    @unique
  password    String
  role        UserRole  @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reservations Reservation?
  deleted Boolean @default(false)
  profile Profile? 
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String   @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  STAFF
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}


model Order {
  id            String      @id @default(cuid()) @unique
  table         Table       @relation(fields: [tableId], references: [number])
  tableId       Int  
  items         OrderItem[]
  total         Float
  status        OrderStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model MenuItem {
  id          String      @id @default(cuid()) @unique
  name        String      @unique
  price       Float
  description String
  observations String?
  orders      OrderItem[]
}

model OrderItem {
  id        String    @id @default(cuid()) @unique
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  menuItem  MenuItem  @relation(fields: [menuItemId], references: [name])
  menuItemId String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Table {
  number      Int          @id @unique @default(autoincrement())
  capacity    Int
  available   Boolean      @default(true)
  deleted     Boolean      @default(false)
  reservation  Reservation?
  orders      Order[]
  total       Float        @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model Reservation {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  table           Table     @relation(fields: [tableId], references: [number])
  tableId         Int       @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reservationTime DateTime 
}





